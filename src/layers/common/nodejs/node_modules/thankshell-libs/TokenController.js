const TransactionService = require('thankshell-libs/TransactionService.js');
const GroupMembersDao = require('thankshell-libs/GroupMembersDao.js');
const GroupMemberPermission = require('thankshell-libs/GroupMemberPermission.js');
const GroupDao = require('thankshell-libs/GroupDao.js');
const appInterface = require('thankshell-libs/interface.js');
const TransactionHistoryRepository = require('thankshell-libs/TransactionHistoryRepository.js');


module.exports = class TokenController {
  constructor(groupId) {
    this.groupId = groupId;
    this.transactionService = new TransactionService(
      groupId,
      new GroupDao(),
      new GroupMembersDao(),
      new TransactionHistoryRepository(process.env.TOKEN_TRANSACTIONS_TABLE_NAME)
    );
  }

  async publishAsync(authId, amount, comment) {
    if (!amount) {
        throw new appInterface.ApplicationError(
          "パラメータが誤っています",
          "ILLIGAL_PARAMETERS",
          403
        );
    }

    const member = await (new GroupMembersDao()).findMemberByAuthIdAsync(this.groupId, authId);
    if(!member) {
      throw new appInterface.ApplicationError("user id not found", "MEMBER_NOT_FOUND", 403);
    }
    if (member.permission < GroupMemberPermission.ADMIN) {
      throw new appInterface.PermissionDeniedError("この取引を発行する権限がありません");
    }

    const timestamp = +(new Date());

    await this.transactionService.publishAsync(parseInt(amount, 10), timestamp, comment ? comment : '');
  }
};
