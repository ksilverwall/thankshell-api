'use strict';

const AWS = require("aws-sdk");
const dynamo = new AWS.DynamoDB.DocumentClient();

module.exports = class TransactionHistoryRepository {
  constructor() {
    this.tableInfo = {
      'info': process.env.TABLE_INFO_TABLE_NAME,
    };
    this.reserved = ['--'];
  }

  async getAsync(account) {
    let items = [];
    const info = await dynamo.get({
      TableName: process.env.TABLE_INFO_TABLE_NAME,
      Key:{
        'name': process.env.REMITTANCE_TRANSACTIONS,
      }
    }).promise();
    const maxBlockId = Math.floor(info.Item.current_id_sequence / 1000);

    for (var blockId=maxBlockId; blockId >= 0; --blockId) {
      var data = await dynamo.query({
        TableName: process.env.REMITTANCE_TRANSACTIONS,
        KeyConditionExpression: "block_id = :block",
        FilterExpression: "from_account = :account or to_account = :account",
        ExpressionAttributeValues: {
          ":block": blockId,
          ":account": account
        }
      }).promise();
      items = items.concat(data.Items);
    }

    return items;
  }

  async getAllAsync() {
    let items = [];
    let tableInfo = await dynamo.get({
      TableName: process.env.TABLE_INFO_TABLE_NAME,
      Key:{
        'name': process.env.REMITTANCE_TRANSACTIONS,
      }
    }).promise();

    let maxBlockId = tableInfo.Item ? Math.floor(tableInfo.Item.current_id_sequence / 1000) : 0;

    for (let blockId=maxBlockId; blockId >= 0; --blockId) {
      let data = await dynamo.query({
        TableName: process.env.REMITTANCE_TRANSACTIONS,
        KeyConditionExpression: "block_id = :block",
        ExpressionAttributeValues: {
            ":block": blockId,
        }
      }).promise();

      items = items.concat(data.Items);
    }

    return items;
  }

  async insertAsync(xdata, timestamp) {
    const currentData = await dynamo.get({
      TableName: process.env.TABLE_INFO_TABLE_NAME,
      Key:{
        'name': process.env.REMITTANCE_TRANSACTIONS,
      },
    }).promise();

    if (!currentData.Item) {
      await dynamo.put({
        TableName: process.env.TABLE_INFO_TABLE_NAME,
        Item: {
          'name': process.env.REMITTANCE_TRANSACTIONS,
          'current_id_sequence': 0
        },
      }).promise();
    }

    const data = await dynamo.update({
      TableName: process.env.TABLE_INFO_TABLE_NAME,
      Key:{
        'name': process.env.REMITTANCE_TRANSACTIONS,
      },
      UpdateExpression: "set current_id_sequence = current_id_sequence + :val",
      ExpressionAttributeValues:{
        ":val": 1,
      },
      ReturnValues:"UPDATED_NEW"
    }).promise();

    const sequence = data.Attributes.current_id_sequence;

    const item = {
      "block_id": Math.floor(sequence / 1000),
      "transaction_id": sequence,
      "from_account": xdata.from,
      "to_account": xdata.to,
      "type": xdata.token,
      "amount": xdata.amount,
      "timestamp": timestamp,
      "comment": xdata.comment ? xdata.comment : ' ',
    };
    await dynamo.put({
      TableName: process.env.REMITTANCE_TRANSACTIONS,
      Item: item
    }).promise();
  }
}
