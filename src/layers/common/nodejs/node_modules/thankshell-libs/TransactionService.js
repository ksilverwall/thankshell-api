'use strict';

const BANK_MEMBER_ID = '__BANK__';
const VOID_MEMBER_ID = '__VOID__';

const encode = (oldMemberId) => {
  switch(oldMemberId) {
    case 'sla_bank': return BANK_MEMBER_ID;
    case '--': return VOID_MEMBER_ID;
    default: return oldMemberId;
  }
}

const decode = (memberId) => {
  switch(memberId) {
    case BANK_MEMBER_ID: return 'sla_bank';
    case VOID_MEMBER_ID: return '--';
    default: return memberId;
  }
}

const convertToClassic = (record) => {
  return {
    "transaction_id": record['transaction_id'],
    "from_account": decode(record['from_member_id']),
    "to_account": decode(record['to_member_id']),
    "type": 'selan',
    "amount": record['amount'],
    "timestamp": record['timestamp'],
    "comment": record['comment'],
  };
}

module.exports = class TransactionService {
    constructor(groupId, groupDao, groupMembersDao, transactionHistoryRepository) {
        this.groupId = groupId;
        this.groupDao = groupDao;
        this.groupMembersDao = groupMembersDao;
        this.transactionHistoryRepository = transactionHistoryRepository;
    }

    async create(fromMemberId, toMemberId, amount, timestamp, comment) {
        const members = await this.groupMembersDao.getMembersAsync(this.groupId);
        if (!this.validAccount(members, fromMemberId)) {
            throw new Error(`送金元${decode(fromMemberId)}が無効です`);
        }

        if (!this.validAccount(members, toMemberId)) {
            throw new Error(`送金先${decode(toMemberId)}が無効です`);
        }

        if (fromMemberId !== VOID_MEMBER_ID && await this.getAccountHoldingAsync(decode(fromMemberId)) < amount) {
            throw new Error("所持金が不足しています");
        }

        if (fromMemberId === toMemberId) {
            throw new Error("自分自身に送金しています");
        }

        if (isNaN(amount) || amount <= 0) {
            throw new Error("illigal amount: " + amount);
        }

        if(comment && comment.length > 200) {
            throw new Error("コメントが200文字を超えています");
        }

        await this.transactionHistoryRepository.insertAsync(
            this.groupId,
            fromMemberId,
            toMemberId,
            amount,
            timestamp,
            comment ? comment : ''
        );
    }

    validAccount(members, memberId) {
        const memberIds = members.map(member => member.memberId);
        return [BANK_MEMBER_ID, VOID_MEMBER_ID].includes(memberId)
                || memberIds.includes(memberId);
    }

    //--------------------------------------------------------------------
    // For get-token-holders

    async getHoldingsAsync() {
        const records = await this.transactionHistoryRepository.getAllAsync(this.groupId);
        const items = records.map(record => convertToClassic(record));

        let history = {
            Count: items.length,
            Items: items
        };
        let result = {};

        history.Items.forEach((item) => {
            if(isFinite(item.amount)) {
                if (item.from_account != '--') {
                    if (!result[item.from_account]) { result[item.from_account] = 0; }
                    result[item.from_account] -= item.amount;
                }
                if (item.to_account != '--') {
                    if (!result[item.to_account]) { result[item.to_account] = 0; }
                    result[item.to_account] += item.amount;
                }
            }
        });

        return result;
    }

    async getAccountHoldingAsync(userId) {
        const records = await this.transactionHistoryRepository.getAsync(this.groupId, encode(userId));
        const items = records.map(record => convertToClassic(record));

        let history = {
            Count: items.length,
            Items: items,
        };

        let carried = 0;

        history.Items.forEach((item) => {
            if(isFinite(item.amount)) {
                if(item.from_account == userId) {
                    carried -= item.amount;
                }
                if(item.to_account == userId) {
                    carried += item.amount;
                }
            }
        });

        return carried;
    }

    async getPublishedAsync() {
        const userId = '--';
        const records = await this.transactionHistoryRepository.getAsync(this.groupId, encode(userId));
        const items = records.map(record => convertToClassic(record));

        let history = {
            Count: items.length,
            Items: items,
        };

        let carried = 0;

        history.Items.forEach((item) => {
            if(item.from_account == userId) {
                carried += item.amount;
            }
            if(item.to_account == userId) {
                carried -= item.amount;
            }
        });

        return carried;
    }

    async getHistoryAsync() {
        const records = await this.transactionHistoryRepository.getAllAsync(this.groupId);
        const items = records.map(record => convertToClassic(record));

        let history = {
            Count: items.length,
            Items: items
        };
        return history;
    }

    async getMemberHistoryAsync(userId) {
        const records = await this.transactionHistoryRepository.getAsync(this.groupId, encode(userId));
        const items = records.map(record => convertToClassic(record));

        return {
            Count: items.length,
            Items: items,
        };
    }

    async publishAsync(amount, timestamp, comment) {
        await this.create(VOID_MEMBER_ID, BANK_MEMBER_ID, amount, timestamp, comment);
    }
}
