const Auth = require('thankshell-libs/auth.js');
const TransactionsDao = require('thankshell-libs/TransactionsDao.js');
const appInterface = require('thankshell-libs/interface.js');
const AWS = require("aws-sdk");

const dynamo = new AWS.DynamoDB.DocumentClient();


const getGroupInfo = async(groupId) => {
  let data = await dynamo.get({
    TableName: process.env.GROUPS_TABLE_NAME,
    Key:{
      'group_id': groupId,
    }
  }).promise();

  return data.Item;
};

module.exports = class TokenController {
  constructor(groupId) {
    this.groupId = groupId;
  }

  async publishAsync(authId, amount, comment) {
    const groupId = this.groupId;

    let userId = await Auth.getMemberIdAsync(groupId, authId);
    if(!userId) {
        throw new appInterface.ApplicationError("user id not found", "MEMBER_NOT_FOUND", 403);
    }


    if (!amount) {
        throw new appInterface.ApplicationError(
          "パラメータが誤っています",
          "ILLIGAL_PARAMETERS",
          403
        );
    }

    let groupInfo = await getGroupInfo(groupId);

    if(!groupInfo.admins.values.includes(userId)) {
        throw new Error("この取引を発行する権限がありません");
    }

    let dao = new TransactionsDao();

    let transaction = {};
    transaction.token = 'selan';
    transaction.from = '--';
    transaction.to = groupInfo.bank_id;
    transaction.amount = parseInt(amount, 10);
    transaction.comment = comment ? comment : ' ';

    await dao.create(groupId, transaction);
  }
};
