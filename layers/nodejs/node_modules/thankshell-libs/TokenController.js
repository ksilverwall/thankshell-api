const TransactionsDao = require('thankshell-libs/TransactionsDao.js');
const GroupMembersDao = require('thankshell-libs/GroupMembersDao.js');
const GroupMemberPermission = require('thankshell-libs/GroupMemberPermission.js');
const GroupDao = require('thankshell-libs/GroupDao.js');
const appInterface = require('thankshell-libs/interface.js');


module.exports = class TokenController {
  constructor(groupId) {
    this.groupId = groupId;
  }

  async publishAsync(authId, amount, comment) {
    if (!amount) {
        throw new appInterface.ApplicationError(
          "パラメータが誤っています",
          "ILLIGAL_PARAMETERS",
          403
        );
    }

    const groupId = this.groupId;
    const member = await (new GroupMembersDao()).findMemberByAuthIdAsync(groupId, authId);
    if(!member) {
      throw new appInterface.ApplicationError("user id not found", "MEMBER_NOT_FOUND", 403);
    }
    if (member.permission < GroupMemberPermission.ADMIN) {
      throw new appInterface.PermissionDeniedError("この取引を発行する権限がありません");
    }

    const groupDao = new GroupDao();
    const group = await groupDao.getAsync(groupId);

    let transaction = {
      token: 'selan',
      from: '--',
      to: group.bankId,
      amount: parseInt(amount, 10),
      comment: comment ? comment : ' ',
    };

    const transactionsDao = new TransactionsDao();
    await transactionsDao.create(groupId, transaction);
  }
};
