const GroupDao = require('thankshell-libs/GroupDao.js');
const GroupMembersDao = require('thankshell-libs/GroupMembersDao.js');
const GroupMemberPermission = require('thankshell-libs/GroupMemberPermission.js');
const appInterface = require('thankshell-libs/interface.js');
const crypto = require('crypto');


const getHash = (message) => {
  return crypto.createHash('sha256').update(message).digest('hex')
};

const getMemberDetails = async(allMembers, secrets, adminUser) => {
  let dict = {}
  allMembers.forEach(user => {
    const userId = user.user_id
    const data = {
      state: user.status,
      displayName: user.displayName,
    }
    if (user.status === 'UNREGISTERED' && adminUser) {
      data.linkParams = {
        m: userId,
        hash: getHash(userId + secrets),
      }
    }

    dict[userId] = data
  })

  return dict
};

const Permission = {
    ADMIN: 'admin',
    MEMBER: 'member',
    VISITOR: 'visitor',
};

const getPermissionString = (permission) => {
  switch (permission) {
    case GroupMemberPermission.VISITOR:
      return Permission.VISITOR;
    case GroupMemberPermission.MEMBER:
      return Permission.MEMBER;
    case GroupMemberPermission.ADMIN:
      return Permission.ADMIN;
  }
};

module.exports = class GroupController {
  async get(authId, groupId) {
    const group = await (new GroupDao()).getAsync(groupId);
    if (!group) {
      throw new appInterface.ApplicationError(`group '${groupId}' is not found`, 404)
    }

    const groupMembersDao = new GroupMembersDao();
    const member = await groupMembersDao.findMemberByAuthIdAsync(groupId, authId);
    if (member) {
      const permission = getPermissionString(member.permission);

      console.log(`${authId} has ${permission} for ${groupId}`)

      const allMembers = await groupMembersDao.getMembersAsync(groupId);

      return {
        groupId: groupId,
        permission: permission,
        owner: await groupMembersDao.getOwnerAsync(groupId),
        memberId: member.memberId,
        admins: await groupMembersDao.getAdminsAsync(groupId),
        bankId: group.bankId,
        tokenName: group.tokenName,
        members: await getMemberDetails(allMembers, group.secrets, (permission === Permission.ADMIN)),
      }
    } else {
      console.log(`${authId} has visitor permission for ${groupId}`)

      return {
        groupId: groupId,
        permission: Permission.VISITOR,
        owner: await groupMembersDao.getOwnerAsync(groupId),
      }
    }
  }
};
