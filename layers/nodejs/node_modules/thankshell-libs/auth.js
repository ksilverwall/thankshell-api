const AWS = require("aws-sdk");
const dynamo = new AWS.DynamoDB.DocumentClient();

exports.getAuthId = claims => {
  const identities = JSON.parse(claims.identities);

  return identities.providerName + ':' + identities.userId;
};

exports.getMemberIdAsync = async(groupId, authId) => {
  const result = await dynamo.get({
    TableName: process.env.AUTH_TABLE_NAME,
    Key:{
      'auth_id': authId,
    },
  }).promise()

  return result.Item ? result.Item['user_id'] : null
};

exports.getMemberAsync = async(groupId, userId) => {
  if (userId) {
    const result = await dynamo.get({
        TableName: process.env.USERS_TABLE_NAME,
        Key:{
            'user_id': userId,
        },
    }).promise();

    if (result.Item) {
        const {status, user_id, display_name} = result.Item;
        return {
            status: status,
            user_id: user_id,
            displayName: display_name ? display_name : user_id,
        };
    }
  };

  return {
      status: 'UNREGISTERED',
      'user_id': userId,
      'displayName': userId,
  };
};

//------------------------------------
// classic functions

exports.getUserId = async(claims) => {
  return await exports.getMemberIdAsync('sla', exports.getAuthId(claims));
};

exports.getUser = async(userId) => {
  return await exports.getMemberAsync('sla', userId);
};

exports.getUserInfo = async(claims) => {
  return await exports.getUser(await exports.getMemberIdAsync('sla', exports.getAuthId(claims)));
};
