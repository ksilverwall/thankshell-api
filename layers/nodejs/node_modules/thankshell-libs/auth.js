let AWS = require("aws-sdk");

exports.getUserId = async(claims) => {
    if (claims.identities) {
        let identities = JSON.parse(claims.identities);
        let dynamo = new AWS.DynamoDB.DocumentClient();

        let authId = identities.providerName + ':' + identities.userId;
        let result = await dynamo.get({
            TableName: process.env.AUTH_TABLE_NAME,
            Key:{
                'auth_id': authId,
            },
        }).promise();

        if (!result.Item) {
            return null;
        }

        return result.Item['user_id'];
    } else {
        return claims['cognito:username'];
    }
};

exports.getUserInfo = async(claims) => {
    let userId;
    let dynamo = new AWS.DynamoDB.DocumentClient();

    if (claims.identities) {
        let identities = JSON.parse(claims.identities);

        let authId = identities.providerName + ':' + identities.userId;
        let result = await dynamo.get({
            TableName: process.env.AUTH_TABLE_NAME,
            Key:{
                'auth_id': authId,
            },
        }).promise();

        if (!result.Item) {
            return {
                status: 'UNREGISTERED',
            };
        }

        userId = result.Item['user_id'];
    } else {
        userId = claims['cognito:username'];
    }

    let result = await dynamo.get({
        TableName: process.env.USERS_TABLE_NAME,
        Key:{
            'user_id': userId,
        },
    }).promise();

    if (result.Item) {
        return result.Item;
    } else {
        return {
            status: 'UNREGISTERED',
            'user_id': userId,
        };
    }
};
