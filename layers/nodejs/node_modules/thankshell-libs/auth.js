const AWS = require("aws-sdk");
const dynamo = new AWS.DynamoDB.DocumentClient();

exports.getAuthId = claims => {
  const identities = JSON.parse(claims.identities);

  return identities.providerName + ':' + identities.userId;
};

exports.getMemberIdAsync = async(groupId, authId) => {
  const result = await dynamo.get({
    TableName: process.env.AUTH_TABLE_NAME,
    Key:{
      'auth_id': authId,
    },
  }).promise()

  return result.Item ? result.Item['user_id'] : null
};

exports.getMemberAsync = async(groupId, userId) => {
  if (userId) {
    const result = await dynamo.get({
        TableName: process.env.USERS_TABLE_NAME,
        Key:{
            'user_id': userId,
        },
    }).promise();

    if (result.Item) {
        const {status, user_id, display_name} = result.Item;
        return {
            status: status,
            user_id: user_id,
            displayName: display_name ? display_name : user_id,
        };
    }
  };

  return {
      status: 'UNREGISTERED',
      'user_id': userId,
      'displayName': userId,
  };
};

const getGroupAsync = async(groupId) => {
    let data = await dynamo.get({
        TableName: process.env.GROUPS_TABLE_NAME,
            Key:{
                'group_id': groupId,
            }
    }).promise();

    return data.Item;
};

exports.isAccessableAsync = async(groupId, permissions, claims) => {
  const userInfo = await exports.getUser(await exports.getMemberIdAsync(groupId, exports.getAuthId(claims)));
  const userId = userInfo.user_id;

  if (permissions.includes('visitor')){
    return true;
  }

  const group = await getGroupAsync(groupId);
  if (permissions.includes('member') && group.memberDetails.values.includes(userId)){
    return true;
  }

  if (permissions.includes('admin') && group.admins.values.includes(userId)){
    return true;
  }

  return false;
};

//------------------------------------
// classic functions

exports.getUserId = async(claims) => {
  return await exports.getMemberIdAsync('sla', exports.getAuthId(claims));
};

exports.getUser = async(userId) => {
  return await exports.getMemberAsync('sla', userId);
};
