const AWS = require("aws-sdk");
const GroupMemberPermission = require('thankshell-libs/GroupMemberPermission.js');
const appInterface = require('thankshell-libs/interface.js');

const dynamo = new AWS.DynamoDB.DocumentClient();

const parsePermission = (strPermission) => {
  switch(strPermission) {
    case 'owner':
      return GroupMemberPermission.OWNER;
    case 'admin':
      return GroupMemberPermission.ADMIN;
    case 'member':
      return GroupMemberPermission.MEMBER;
    default:
      return GroupMemberPermission.VISITOR;
  }
};

const parseRecord = record => {
  if (!record) {
    return null;
  }

  return {
    status: record['state'],
    memberId: record['member_id'],
    user_id: record['member_id'],
    permission: parsePermission(record['group_permission'] ? record['group_permission'] : 'visitor'),
    displayName: record['display_name'] ? record['display_name'] : record['member_id'],
  };
}

module.exports = class GroupMembersDao {
  async getAsync(groupId, memberId) {
    const result = await dynamo.get({
      TableName: process.env.GROUP_MEMBERS_TABLE_NAME,
      Key:{
        'group_id': groupId,
        'member_id': memberId,
      },
    }).promise();

    return parseRecord(result.Item);
  }

  async addAsync(groupId, memberId) {
    const result = memberId.match(/^\w+$/g)
    if (!result) {
      throw new appInterface.ApplicationError(
        "IDには英数字を指定してください",
        "INVALID_MEMBERID_FORMAT",
        403,
      )
    }

    const member = await this.getAsync(groupId, memberId);
    if (member) {
      throw new appInterface.ApplicationError(`member '${memberId}' already registered`);
    }

    await dynamo.put({
      TableName: process.env.GROUP_MEMBERS_TABLE_NAME,
      Item: {
        'group_id': groupId,
        'member_id': memberId,
        'state': 'UNREGISTERED',
        'group_permission': 'member',
      },
    }).promise();
  }

  async deleteAsync(groupId, memberId) {
    await dynamo.delete({
      TableName: process.env.GROUP_MEMBERS_TABLE_NAME,
      Key:{
        'group_id': groupId,
        'member_id': memberId,
      },
    }).promise();
  }

  /**
   * FIXME: exclude from this class
   *
   * @param {string} groupId
   * @param {string} memberId
   * @param {string} authId
   */
  async entryAsync(groupId, memberId, authId) {
    if(await this.findMemberIdByAuthIdAsync(groupId, authId)) {
      throw new appInterface.ApplicationError(
        `ユーザはすでに登録されています(${memberId})`,
        "ALREADY_MEMBER_USER",
        403,
      )
    }

    const member = await this.getAsync(groupId, memberId);
    if (!member) {
      throw new appInterface.ApplicationError(
        `'${groupId}'の招待リストに'${memberId}'を見つけられませんでした`,
        "NO_MEMBERID_IN_LIST",
        403,
      )
    }

    if (member.status !== 'UNREGISTERED') {
      throw new appInterface.ApplicationError(
        `ユーザはすでに登録されています(${member.memberId})`,
        "ALREADY_MEMBER_USER",
        403,
      )
    }

    await this.updateAuthIdAsync(groupId, memberId, authId);
  }

  async updateAuthIdAsync(groupId, memberId, authId) {
    await dynamo.update({
      TableName: process.env.GROUP_MEMBERS_TABLE_NAME,
      Key:{
        'group_id': groupId,
        'member_id': memberId,
      },
      ExpressionAttributeNames: {
        '#member_state': 'state',
      },
      ExpressionAttributeValues: {
        ':state': 'ACTIVE',
        ':auth_id': authId,
      },
      UpdateExpression: 'SET #member_state = :state, auth_id = :auth_id',
    }).promise();
  }

  async updateAsync(groupId, authId, memberId, user) {
    console.log(`Update user: ${memberId}`)
    console.log(`Update data: ${user}`)

    if (memberId !== await this.findMemberIdByAuthIdAsync(groupId, authId)) {
      throw new appInterface.ApplicationError('No access permission', "MEMBER_NOT_FOUND", 400);
    }

    await dynamo.update({
      TableName: process.env.GROUP_MEMBERS_TABLE_NAME,
      Key:{
        'group_id': groupId,
        'member_id': memberId,
      },
      ExpressionAttributeValues: {
        ':display_name': user.displayName,
      },
      UpdateExpression: 'SET display_name = :display_name',
    }).promise();
  }

  async findGroupsByAuthIdAsync(authId) {
    const data = await dynamo.scan({
      TableName: process.env.GROUP_MEMBERS_TABLE_NAME,
      ProjectionExpression: "group_id",
      ExpressionAttributeValues: {
          ":auth_id": authId,
      },
      FilterExpression: "auth_id = :auth_id",
    }).promise();

    return data.Items.map(record => record['group_id']);
  }

  async findMemberByAuthIdAsync(groupId, authId) {
    const result = await dynamo.query({
      TableName: process.env.GROUP_MEMBERS_TABLE_NAME,
      ExpressionAttributeValues: {
        ":group_id": groupId,
        ":auth_id": authId,
      },
      KeyConditionExpression: "group_id = :group_id",
      FilterExpression: "auth_id = :auth_id",
    }).promise();

    const members = result.Items.map(value => parseRecord(value));

    return (members.length > 0) ? members[0] : null;
  }

  /**
   * FIXME: exclude from this class
   * 
   * @param {string} groupId
   * @param {string} memberId
   */
  async getMemberAsync(groupId, memberId) {
    if (!memberId) {
      return {
        status: 'UNREGISTERED',
        memberId: null,
        user_id: null,
        displayName: null,
      };
    } 

    const member = await this.getAsync(groupId, memberId);
    if (!member) {
      return {
        status: 'UNREGISTERED',
        memberId: null,
        user_id: null,
        displayName: null,
      };
    }

    return member;
  }

  async findMemberIdByAuthIdAsync(groupId, authId) {
    const result = await dynamo.query({
      TableName: process.env.GROUP_MEMBERS_TABLE_NAME,
      ExpressionAttributeValues: {
        ":group_id": groupId,
        ":auth_id": authId,
      },
      KeyConditionExpression: "group_id = :group_id",
      FilterExpression: "auth_id = :auth_id",
    }).promise();

    const memberIds = result.Items.map(value => value['member_id']);

    return (memberIds.length > 0) ? memberIds[0] : null;
  }

  async getAdminsAsync(groupId) {
    const result = await dynamo.query({
      TableName: process.env.GROUP_MEMBERS_TABLE_NAME,
      ExpressionAttributeValues: {
        ":group_id": groupId,
        ":owner_permission": 'owner',
        ":admin_permission": 'admin',
      },
      KeyConditionExpression: "group_id = :group_id",
      FilterExpression: "group_permission = :admin_permission or group_permission = :owner_permission",
    }).promise();

    return result.Items.map(value => value['member_id']);
  }

  async getOwnerAsync(groupId) {
    const result = await dynamo.query({
      TableName: process.env.GROUP_MEMBERS_TABLE_NAME,
      ExpressionAttributeValues: {
        ":group_id": groupId,
        ":group_permission": 'owner',
      },
      KeyConditionExpression: "group_id = :group_id",
      FilterExpression: "group_permission = :group_permission",
    }).promise();

    const memberIds = result.Items.map(value => value['member_id']);

    return (memberIds.length > 0) ? memberIds[0] : null;
  }

  async getMembersAsync(groupId) {
    const result = await dynamo.query({
      TableName: process.env.GROUP_MEMBERS_TABLE_NAME,
      ExpressionAttributeValues: {
        ":group_id": groupId
      },
      KeyConditionExpression: "group_id = :group_id"
    }).promise();

    return result.Items.map(record => {
      return {
        status: record['state'],
        memberId: record['member_id'],
        user_id: record['member_id'],
        displayName: record['display_name'] ? record['display_name'] : record['member_id'],
      };
    });
  }
};
