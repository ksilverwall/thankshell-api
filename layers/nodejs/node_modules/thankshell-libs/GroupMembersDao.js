const AWS = require("aws-sdk");
const Auth = require('thankshell-libs/auth.js');
const appInterface = require('thankshell-libs/interface.js');

const dynamo = new AWS.DynamoDB.DocumentClient();

const setMember = async(gid, members) => {
  await dynamo.update({
    TableName: process.env.GROUPS_TABLE_NAME,
    Key:{
        'group_id': gid,
    },
    UpdateExpression: 'set members = :members',
    ExpressionAttributeValues: {
        ':members': dynamo.createSet(members)
    }
  }).promise();
}

const loadMembers = async(gid) => {
  const data = await dynamo.get({
    TableName: process.env.GROUPS_TABLE_NAME,
    Key:{
        'group_id': gid,
    },
  }).promise();

  return data.Item.members.values
};

const getGroup = async(groupId) => {
    const result = await dynamo.get({
        TableName: process.env.GROUPS_TABLE_NAME,
        Key:{
            'group_id': groupId,
        },
    }).promise()

    return result.Item
};

const getUser = async(userId) => {
    const result = await dynamo.get({
        TableName: process.env.USERS_TABLE_NAME,
        Key:{
            'user_id': userId,
        },
    }).promise()

    return result.Item
};

exports.addAsync = async(groupId, memberId) => {
  let members = await loadMembers(groupId)
  if (members.includes(memberId)) {
    throw new appInterface.ApplicationError(`'${memberId}' already registered`)
  }
  members.push(memberId)

  await setMember(groupId, members)
};

exports.deleteAsync = async(groupId, memberId) => {
  const data = await dynamo.get({
    TableName: process.env.GROUPS_TABLE_NAME,
    Key:{
        'group_id': groupId,
    },
  }).promise();

  const members = data.Item.members;
  const filteredMembers = members.values.filter(uid => uid != memberId);

  await dynamo.update({
    TableName: process.env.GROUPS_TABLE_NAME,
    Key:{
        'group_id': groupId,
    },
    UpdateExpression: 'set members = :members',
    ExpressionAttributeValues: {
        ':members': dynamo.createSet(filteredMembers)
    }
  }).promise();
};

exports.entryAsync = async(groupId, memberId, authId) => {
  // FIXME: set memberId related with groupId
  const result = memberId.match(/^\w+$/g)
  if (!result) {
    throw new appInterface.ApplicationError(
      "IDには英数字を指定してください",
      "INVALID_MEMBERID_FORMAT",
      403,
    )
  }

  const group = await getGroup(groupId)
  if (!group.members.values.includes(memberId)) {
    throw new appInterface.ApplicationError(
      `'${groupId}'の招待リストに'${userId}'を見つけられませんでした`,
      "NO_MEMBERID_IN_LIST",
      403,
    )
  }

  // FIXME: set memberId related with groupId
  const userInfo = await Auth.getUser(await Auth.getMemberIdAsync(groupId, authId));
  if(userInfo.status != 'UNREGISTERED') {
    throw new appInterface.ApplicationError(
      `ユーザはすでに登録されています(${userInfo.user_id})`,
      "ALREADY_MEMBER_USER",
      403,
    )
  }

  // FIXME: set memberId related with groupId
  if (await getUser(memberId)) {
    throw new appInterface.ApplicationError(
      "指定のMemberIDは既に登録されています",
      "ALREADY_REGISTERD_MEMBERID",
      403,
    )
  }

  await dynamo.put({
    TableName: process.env.USERS_TABLE_NAME,
    Item: {
      user_id: memberId,
      status: 'ENABLE',
    }
  }).promise()

  await dynamo.update({
    TableName: process.env.AUTH_TABLE_NAME,
    Key:{
      'auth_id': authId,
    },
    UpdateExpression: 'SET user_id = :value',
    ExpressionAttributeValues: {
      ':value': memberId,
    },
  }).promise()
};

exports.updateAsync = async(groupId, authId, userId, user) => {
  console.log(`Update user: ${userId}`)
  console.log(`Update data: ${user}`)

  if (userId !== await Auth.getMemberIdAsync('sla', authId)) {
    throw new appInterface.ApplicationError('No access permission', "MEMBER_NOT_FOUND", 400);
  }

  await dynamo.update({
    TableName: process.env.USERS_TABLE_NAME,
    Key:{
        'user_id': userId,
    },
    UpdateExpression: 'SET display_name = :display_name',
    ExpressionAttributeValues: {
        ':display_name': user.displayName,
    },
  }).promise()
};
