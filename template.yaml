AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  thankshell-api

  Sample SAM Template for thankshell-api
  
Parameters:
  EnvName:
    Type: String
  AuthTableName:
    Type: String
  UsersTableName:
    Type: String
  GroupsTableName:
    Type: String
  InfoTableName:
    Type: String
  TransactionsTableName:
    Type: String
  Environment:
    Type: String
    AllowedValues:
    - staging
    - production
    Default: staging

Globals:
  Api:
    OpenApiVersion: 3.0.1
  Function:
    Timeout: 10
    Handler: index.handler
    Runtime: nodejs12.x
    Environment:
      Variables:
        AUTH_TABLE_NAME: !Ref AuthTableName
        USERS_TABLE_NAME: !Ref UsersTableName
        GROUPS_TABLE_NAME: !Ref GroupsTableName
        TABLE_INFO_TABLE_NAME: !Ref InfoTableName
        REMITTANCE_TRANSACTIONS: !Ref TransactionsTableName

Resources:

  ###############################################
  # Api

  ThankshellApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
        AddDefaultAuthorizerToCorsPreflight: false
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: arn:aws:cognito-idp:ap-northeast-1:027569216980:userpool/ap-northeast-1_GyRiCriHq
      Variables:
        transaction_database: !Ref EnvName
      Cors:
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"
      GatewayResponses:
        UNAUTHORIZED:
          StatusCode: 401
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin: "'*'"

  ###############################################
  # Database

  AuthTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
        TableName: !Ref AuthTableName
        PrimaryKey:
            Name: auth_id
            Type: String

  UsersTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
        TableName: !Ref UsersTableName
        PrimaryKey:
            Name: user_id
            Type: String

  GroupsTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
        TableName: !Ref GroupsTableName
        PrimaryKey:
            Name: group_id
            Type: String

  ###############################################
  # Layers

  CommonLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: thankshell-libs
      Description: Common Application Resource Layer
      ContentUri: layers

  #######################################
  # Functions

  #
  # User
  #

  GetUserInfo:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: get-user-info/
      Events:
        ApiTrigger:
          Type: Api
          Properties:
            Path: /user
            Method: get
            RestApiId: !Ref ThankshellApi
      Policies:
      - DynamoDBReadPolicy:
          TableName: !Ref AuthTableName
      - DynamoDBReadPolicy:
          TableName: !Ref UsersTableName
      - DynamoDBReadPolicy:
          TableName: !Ref GroupsTableName
      Layers:
      - !Ref CommonLayer

  CreateUser:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: create-user/
      Events:
        ApiTrigger:
          Type: Api
          Properties:
            Path: /user
            Method: put
            RestApiId: !Ref ThankshellApi
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref AuthTableName
      - DynamoDBCrudPolicy:
          TableName: !Ref UsersTableName
      Layers:
      - !Ref CommonLayer

  UpdateUser:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: update-user/
      Events:
        ApiTrigger:
          Type: Api
          Properties:
            Path: /user/{userId}
            Method: patch
            RestApiId: !Ref ThankshellApi
      Policies:
      - DynamoDBReadPolicy:
          TableName: !Ref AuthTableName
      - DynamoDBCrudPolicy:
          TableName: !Ref UsersTableName
      Layers:
      - !Ref CommonLayer

  #
  # Groups
  #

  GetGroupInfo:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: groups/get
      Events:
        ApiTrigger:
          Type: Api
          Properties:
            Path: /groups/{group}
            Method: get
            RestApiId: !Ref ThankshellApi
      Policies:
      - DynamoDBReadPolicy:
          TableName: !Ref AuthTableName
      - DynamoDBReadPolicy:
          TableName: !Ref UsersTableName
      - DynamoDBReadPolicy:
          TableName: !Ref GroupsTableName
      Layers:
      - !Ref CommonLayer

  AddMemberToGroup:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: groups/add-member
      Events:
        ApiTrigger:
          Type: Api
          Properties:
            Path: /groups/{group}/members/{member}
            Method: put
            RestApiId: !Ref ThankshellApi
      Policies:
      - DynamoDBReadPolicy:
          TableName: !Ref AuthTableName
      - DynamoDBReadPolicy:
          TableName: !Ref UsersTableName
      - DynamoDBCrudPolicy:
          TableName: !Ref GroupsTableName
      Layers:
      - !Ref CommonLayer

  RemoveMemberFromGroup:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: groups/delete-member
      Events:
        ApiTrigger:
          Type: Api
          Properties:
            Path: /groups/{group}/members/{member}
            Method: delete
            RestApiId: !Ref ThankshellApi
      Policies:
      - DynamoDBReadPolicy:
          TableName: !Ref AuthTableName
      - DynamoDBReadPolicy:
          TableName: !Ref UsersTableName
      - DynamoDBCrudPolicy:
          TableName: !Ref GroupsTableName
      Layers:
      - !Ref CommonLayer

  EntryToGroup:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: groups/entry
      Events:
        ApiTrigger:
          Type: Api
          Properties:
            Path: /groups/{group}/members/{member}/user
            Method: put
            RestApiId: !Ref ThankshellApi
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref AuthTableName
      - DynamoDBCrudPolicy:
          TableName: !Ref UsersTableName
      - DynamoDBCrudPolicy:
          TableName: !Ref GroupsTableName
      Layers:
      - !Ref CommonLayer

  #
  # Token publiched
  #

  GetTokenPublished:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: get-token-published/
      Events:
        ApiTrigger:
          Type: Api
          Properties:
            Path: /token/{token}/published
            Method: get
            RestApiId: !Ref ThankshellApi
      Policies:
      - DynamoDBReadPolicy:
          TableName: !Ref UsersTableName
      Layers:
      - !Ref CommonLayer

  PublishToken:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: publish-token/
      Events:
        ApiTrigger:
          Type: Api
          Properties:
            Path: /token/{token}/published
            Method: post
            RestApiId: !Ref ThankshellApi
      Policies:
      - DynamoDBReadPolicy:
          TableName: !Ref AuthTableName
      - DynamoDBReadPolicy:
          TableName: !Ref UsersTableName
      - DynamoDBReadPolicy:
          TableName: !Ref GroupsTableName
      - DynamoDBCrudPolicy:
          TableName: !Ref InfoTableName
      - DynamoDBCrudPolicy:
          TableName: !Ref TransactionsTableName
      Layers:
      - !Ref CommonLayer

  #
  # Token Holders
  #

  GetTokenHolders:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: get-token-holders/
      Events:
        ApiTrigger:
          Type: Api
          Properties:
            Path: /token/{token}/holders
            Method: get
            RestApiId: !Ref ThankshellApi
      Policies:
      - DynamoDBReadPolicy:
          TableName: !Ref AuthTableName
      - DynamoDBReadPolicy:
          TableName: !Ref UsersTableName
      - DynamoDBReadPolicy:
          TableName: !Ref InfoTableName
      - DynamoDBReadPolicy:
          TableName: !Ref TransactionsTableName
      Layers:
      - !Ref CommonLayer

  GetTokenHoldings:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: get-token-holdings/
      Events:
        ApiTrigger:
          Type: Api
          Properties:
            Path: /token/{token}/holders/{user}
            Method: get
            RestApiId: !Ref ThankshellApi
      Policies:
      - DynamoDBReadPolicy:
          TableName: !Ref AuthTableName
      - DynamoDBReadPolicy:
          TableName: !Ref UsersTableName
      - DynamoDBReadPolicy:
          TableName: !Ref InfoTableName
      - DynamoDBReadPolicy:
          TableName: !Ref TransactionsTableName
      Layers:
      - !Ref CommonLayer

  #
  # Token Transaction
  #

  GetTransactions:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: get-transactions/
      Events:
        ApiTrigger:
          Type: Api
          Properties:
            Path: /token/{token}/transactions
            Method: get
            RestApiId: !Ref ThankshellApi
      Policies:
      - DynamoDBReadPolicy:
          TableName: !Ref AuthTableName
      - DynamoDBReadPolicy:
          TableName: !Ref UsersTableName
      - DynamoDBReadPolicy:
          TableName: !Ref GroupsTableName
      - DynamoDBReadPolicy:
          TableName: !Ref InfoTableName
      - DynamoDBReadPolicy:
          TableName: !Ref TransactionsTableName
      Layers:
      - !Ref CommonLayer

  CreateTransaction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: create-transaction/
      Events:
        ApiTrigger:
          Type: Api
          Properties:
            Path: /token/{token}/transactions
            Method: post
            RestApiId: !Ref ThankshellApi
      Policies:
      - DynamoDBReadPolicy:
          TableName: !Ref AuthTableName
      - DynamoDBReadPolicy:
          TableName: !Ref UsersTableName
      - DynamoDBReadPolicy:
          TableName: !Ref GroupsTableName
      - DynamoDBCrudPolicy:
          TableName: !Ref InfoTableName
      - DynamoDBCrudPolicy:
          TableName: !Ref TransactionsTableName
      Layers:
      - !Ref CommonLayer
